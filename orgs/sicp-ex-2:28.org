#+TITLE: Exercise 2.28

*Exercise 2.28:* Write a procedure `fringe' that takes as argument
a tree (represented as a list) and returns a list whose elements
are all the leaves of the tree arranged in left-to-right order.
For example,

    (define x (list (list 1 2) (list 3 4)))

    (fringe x)
    (1 2 3 4)

    (fringe (list x x))
    (1 2 3 4 1 2 3 4)
#+begin_src scheme :results list
(define (append list1 list2)
    (if (null? list1)
        list2
        (cons (car list1) (append (cdr list1) list2))))

(define (fringe tree)
  (define (helper tree result)
    (cond
      ((null? tree) result)
      ((list? (car tree)) (helper (cdr tree)
                                  (append result (helper (car tree) null))))
      (else (helper (cdr tree) (append result (list (car tree)))))))
  (helper tree null))

(define x (list (list 1 2) (list 3 4)))

(list
 (fringe x)
 (fringe (list x x)))
#+end_src

#+RESULTS:
- (1 2 3 4)
- (1 2 3 4 1 2 3 4)
