*Exercise 1.32:*
  a. Show that `sum' and `product' (*Note Exercise 1-31::) are
    both special cases of a still more general notion called
    `accumulate' that combines a collection of terms, using some
    general accumulation function:

          (accumulate combiner null-value term a next b)

    `Accumulate' takes as arguments the same term and range
    specifications as `sum' and `product', together with a
    `combiner' procedure (of two arguments) that specifies how
    the current term is to be combined with the accumulation of
    the preceding terms and a `null-value' that specifies what
    base value to use when the terms run out.  Write `accumulate'
    and show how `sum' and `product' can both be defined as
    simple calls to `accumulate'.

  b. If your `accumulate' procedure generates a recursive process,
    write one that generates an iterative process.  If it
    generates an iterative process, write one that generates a
    recursive process.

* Part A
 
#+begin_src scheme :results output
  (define (accumulate combiner null-value term a next b)
    (define (helper i j acc)
      (if (> i j)
          acc
          (helper (next i) j (combiner (term i) acc))))
    (helper a b null-value))

  (define (identity d) d)

  (define (sum x y)
    (accumulate + 0 identity x add1 y))

  (define (product x y)
    (accumulate * 1 identity x add1 y))

  (display
   (~a "(sum 3 7) = " (sum 3 7) "\n"))

  (display
   (~a "(product 2 7) = " (product 2 7)))
#+end_src

#+RESULTS:
: (sum 3 7) = 25
: (product 2 7) = 5040

* Part B

  I defined ~accumulate~ iteratively in Part A, so now I will
  define it recursively. I should add that I am not entirely sure
  what the authors mean by terms "running out." For my purposes,
  I am going to assume that the terms have run out when a > b.

  #+header: :eval "no"
  #+begin_src scheme
    (define (accumulate combiner null-value term a next b)
      (if (> a b)
          null-value
          (combiner (term a)
                    (accumulate
                     combiner
                     null-value
                     term
                     (next a)
                     next
                     b))))
  #+end_src
