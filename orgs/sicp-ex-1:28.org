*Exercise 1.28:* One variant of the Fermat test that cannot be
fooled is called the "Miller-Rabin test" (Miller 1976; Rabin
1980).  This starts from an alternate form of Fermat's Little
Theorem, which states that if n is a prime number and a is any
positive integer less than n, then a raised to the (n - 1)st power
is congruent to 1 modulo n.  To test the primality of a number n
by the Miller-Rabin test, we pick a random number a<n and raise a
to the (n - 1)st power modulo n using the `expmod' procedure.
However, whenever we perform the squaring step in `expmod', we
check to see if we have discovered a "nontrivial square root of 1
modulo n," that is, a number not equal to 1 or n - 1 whose square
is equal to 1 modulo n.  It is possible to prove that if such a
nontrivial square root of 1 exists, then n is not prime.  It is
also possible to prove that if n is an odd number that is not
prime, then, for at least half the numbers a<n, computing a^(n-1)
in this way will reveal a nontrivial square root of 1 modulo n.
(This is why the Miller-Rabin test cannot be fooled.)  Modify the
`expmod' procedure to signal if it discovers a nontrivial square
root of 1, and use this to implement the Miller-Rabin test with a
procedure analogous to `fermat-test'.  Check your procedure by
testing various known primes and non-primes.  Hint: One convenient
way to make `expmod' signal is to have it return 0.

As much as I love SICP, I think this question does a terrible job
of explaining the Miller-Rabin test. I went out and looked for
definitions of the Miller-Rabin test, and now I understand what
it is supposed to do. Before I implement it, let me explain it.

* Step 1: Solve for /k/ and /m/ 
  Consider our proposed number, /n/. In the first step of the
  Miller-Rabin test, our task is to find constants /k/ and /m/ such
  that:
  n - 1 = (2 ^ k) * m

  To do this, we divide /n - 1/ by /2 ^ c/, where /c/ starts at 0
  and increments by 1. We continue incrementing /c/ until
  (n - 1) / (2 ^ c) is a floating point number. For example, say we
  must test the primality of 221 using the Miller-Rabin test.

  We begin by subtracting 1 from /n/.
  221 - 1 = 220

  Then, we start dividing 220 by /2 ^ c/ (starting at 1 and
  incrementing by 1) until we get a floating point number.

  220 / (2 ^ 1) = 110
  220 / (2 ^ 2) = 55
  220 / (2 ^ 3) = 27.5

  We have gotten a floating point number, which is our signal to
  stop. Now, let's look at the previous equation, which has
  important information.

  220 / (2 ^ 2) = 55

  This equation has the information we need to solve for /k/ and
  /m/ in /220 - 1 = (2 ^ k) * m. The quotient, 55, is our value for
  /m/. The exponent, 2, is our value for /k/.

  m = 55
  k = 2
  n = 221

  With these variables, we can solve the equation:

  221 - 1 = (2 ^ 2) * 55

* Step 2: Choose /a/
  a ∈ ℝ
  1 < a < n - 1

  In other words, /a/ is an integer between 1 and /n - 1/, where
  n is the proposed prime number. If we were to continue with a
  real example from the previous step, then /a/ would be an
  integer greater than 1 and less than 220. In the Miller-Rabin
  test, /a/ is chosen randomly within this range. So, possible
  values of /a/ include (but are not limited to) 2, 119 and 100.
  Let's try 10.

  a = 10

* Step 3: Determine strong probable prime or composite witness
  Like Fermat's Little Theorem, the Miller-Rabin primality test
  is a probabalistic algorithm. Therefore, one iteration of the
  Miller-Rabin can either prove that a number is composite or
  predict with a very high accuracy that a number is prime. To
  prove with absolute certainty that a number is prime, one must
  divide said number by all members of /f/, where /f/ is 2 or an
  odd integer between 2 and the square root of the number. This
  algorithm has already been explored earlier in the chapter. To
  determine a strong probable prime or a composite witness, we
  will use the following formula:

  B0 = (a ^ m) % n

  From our running example, we have:

  a = 10
  m = 55
  n = 221

  Meaning,

  B0 = (10 ^ 55) % 221
  B0 = 192

  At this point, there are two possibilities:

  1. *B0 = 1 or B0 = -1*: /n/ is very likely to be prime.
  2. *B0 ≠ 1 and B0 ≠ -1*: /n/ could be composite or prime. More
     testing is needed.

  We have encountered the second possibility, meaning that more
  testing is needed. If B0 ≠ 1 and B0 ≠ -1, then we revert to the
  more general case, /Bz/:

  Bz = (B(z - 1) ^ 2) % n

  In our case, this is,

  B1 = (B0 ^ 2) % 221
  B1 = (192 ^ 2) % 221
  B1 = 178

  At this point, there are three possibilities:

  1. *Bz = 1*: /n/ is definitely composite.
  2. *Bz = -1*: /n/ is very likely to be prime.
  3. *Bz ≠ 1 and Bz ≠ -1*: /n/ could be composite or prime. More
     testing is needed.

  If the third case occurs, we reuse the above formula. For our
  example, the third case has occurred, as B1 = 178. So, we'll
  try again.

  B2 = (B1 ^ 2) % 221
  B2 = (178 ^ 2) % 221
  B2 = 81

  We have met our third case again, but this is OK. We can
  continue this process until we meet the first or second case.
  If we were to do this, we would eventually end up with 1,
  meaning that 221 is composite.

  If we determined that /n/ is probably prime, we could choose a
  new value for /a/ and repeat this step multiple times to
  increase the probabilistic 'strength' of the prime (or find out
  that the number is a psuedoprime).

That's it. Now that we understand what the Miller-Rabin test
actually does, we can implement it in the way SICP suggests: By
using ~expmod~ and writing a procedure analogous to the fermat
test. I'll be honest and say that even after going through all
the steps of the Miller-Rabin test, I was still confused as to
how one would transfer implement its process in the ~expmod~
procedure. Specifically, the following part of the problem was
unclear even after reading it dozens of times:

  /However, whenever we perform the squaring step in `expmod', we/
  /check to see if we have discovered a "nontrivial square root of 1/
  /modulo n," that is, a number not equal to 1 or n - 1 whose square/
  /is equal to 1 modulo n./
  
I tried many different approaches to this, none of which worked.
Finally, I gave up and looked to see how others online had
implemented this procedure which I called ~nontrivial-sqrt?~. It
turns out that I was doing everything correctly except for the
calculating the value of ~ret~. In calculating ~ret~, I was
simply doing a recursive call to ~expmod~. Inevitably, this
caused all of my primality tests to return ~#t~. So, now I
understand what they mean by checking "to see if we have
discovered a 'nontrivial square root of 1'" in the squaring step
of ~expmod~. Here is my final implementation with this knowledge
in mind.

#+begin_src scheme :results output org
  (define (nontrivial-sqrt? y m)
    (let ([ret (modulo (sqr y) m)])
      (if
       (and (not (or (= y 1) (= y (sub1 m))))
            (= 1 ret))
       0
       ret)))

  (define (expmod base exp m)
    (cond ((zero? exp) 1)
          ((even? exp)
           (nontrivial-sqrt? (expmod base (/ exp 2) m) m))
          (else
           (modulo (* base (expmod base (sub1 exp) m))
                   m))))

  (define (miller-rabin-test x)
    (= 1 (expmod
          (random 1 x)
          (sub1 x)
          x)))

  (define (miller-rabin-prime? n)
    (define (helper f counter)
      (cond
       ((zero? counter) #t)
       ((miller-rabin-test f) (helper f (sub1 counter)))
       (else #f)))
    (helper n 5))

  (define known-primes
    (list 73 79 83 89 97 101 103 107 109 113))

  (define known-composites
    (list 64 65 66 68 69 70 72 74 75 76 77 78 80 81 82))

  (define (little-formatter lat)
    (define (print-result bool)
      (if
       bool
       (display "Prime\n")
       (display "Composite\n")))
    (map print-result
         (map miller-rabin-prime? lat)))

  (display "Testing known primes:\n")
  (little-formatter known-primes)
  (display "Testing known composites:\n")
  (little-formatter known-composites)
#+end_src

#+RESULTS:
#+begin_src org
Testing known primes:
Prime
Prime
Prime
Prime
Prime
Prime
Prime
Prime
Prime
Prime
Testing known composites:
Composite
Composite
Composite
Composite
Composite
Composite
Composite
Composite
Composite
Composite
Composite
Composite
Composite
Composite
Composite
#+end_src

It works as expected!
