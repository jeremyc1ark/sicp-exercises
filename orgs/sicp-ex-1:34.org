*Exercise 1.34:* Suppose we define the procedure

    (define (f g)
      (g 2))

Then we have

    (f square)
    4

    (f (lambda (z) (* z (+ z 1))))
    6

What happens if we (perversely) ask the interpreter to evaluate
the combination `(f f)'?  Explain.

We would get an error saying that ~2~ is not a procedure. Let's
try expanding the call ~(f f)~ using what we know about the
Scheme interpreter. 

#+header: :eval "no"
#+begin_src scheme
  --> (f f)
  --> ((lambda (g) (g 2)) (lambda (g) (g 2)))
  --> ((lambda (g) ((lambda (g) (g 2)) 2)))
  --> ((lambda (g) (2 2)))
  ;; Here, we would encounter an error because `2' is not a procedure
#+end_src

Let's see if this actually happens.

#+begin_src scheme :results output
  (define (f g)
    (g 2))

  (f f)
#+end_src

#+RESULTS:
: application: not a procedure;
:  expected a procedure that can be applied to arguments
:   given: 2
:   arguments...:
:    2
: 

Just like we expected. What can we learn from this? Never pass a
higher-order procedure to itself.
