*Exercise 1.36:* Modify `fixed-point' so that it prints the
sequence of approximations it generates, using the `newline' and
`display' primitives shown in *Note Exercise 1-22::.  Then find a
solution to x^x = 1000 by finding a fixed point of x |->
`log'(1000)/`log'(x).  (Use Scheme's primitive `log' procedure,
which computes natural logarithms.)  Compare the number of steps
this takes with and without average damping.  (Note that you
cannot start `fixed-point' with a guess of 1, as this would cause
division by `log'(1) = 0.)

#+begin_src scheme :results output
  (require math/statistics)

  (define tolerance 0.00001)

  (define (fixed-point f first-guess)
    (define (close-enough? v1 v2)
      (< (abs (- v1 v2)) tolerance))
    (define (try guess [counter 0])
      (let ((next (f guess)))
        (if (close-enough? guess next)
            (list next counter)
            (try next (add1 counter)))))
    (try first-guess))

  (let
      ([display-pair
        (fixed-point
         (lambda (a) (log 1000 a))
         2.0)])
    (display
     (~a
      "Without average damping...\n"
      "# of recursive calls: "
      (cadr display-pair)
      "\nCalculated fixed point:\n"
      (car display-pair)
      "\n\n")))

  (let
      ([display-pair
        (fixed-point
         (lambda (a) (mean (list a (log 1000 a))))
         2.0)])
    (display
     (~a
      "With average damping...\n"
      "# of recursive calls: "
      (cadr display-pair)
      "\nCalculated fixed point:\n"
      (car display-pair))))
#+end_src

#+RESULTS:
: Without average damping...
: # of recursive calls: 33
: Calculated fixed point:
: 4.555532270803653
: 
: With average damping...
: # of recursive calls: 8
: Calculated fixed point:
: 4.555537551999825
