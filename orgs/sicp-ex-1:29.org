*Exercise 1.29:* Simpson's Rule is a more accurate method of
numerical integration than the method illustrated above.  Using
Simpson's Rule, the integral of a function f between a and b is
approximated as

    h
    - (y_0 + 4y_1 + 2y_2 + 4y_3 + 2y_4 + ... + 2y_(n-2) + 4y_(n-1) + y_n)
    3

where h = (b - a)/n, for some even integer n, and y_k = f(a + kh).
(Increasing n increases the accuracy of the approximation.)
Define a procedure that takes as arguments f, a, b, and n and
returns the value of the integral, computed using Simpson's Rule.
Use your procedure to integrate `cube' between 0 and 1 (with n =
100 and n = 1000), and compare the results to those of the
`integral' procedure shown above.

This was pretty fun to write. Below, we have a recursive version.

#+header: :eval "no"
#+begin_src scheme
  (define (simpson-integral f a b n)
    (define (helper current hi f a h)
      (let ([yk (f (+ a (* current h)))])
        (cond
         ((= current hi) yk)
         ((odd? current)
          (+ (* 4 yk)
             (helper (add1 current) hi f a h)))
         (else (+ (* 2 yk)
                  (helper (add1 current) hi f a h))))))
    (let ([h (/ (- b a) n)])
      (exact->inexact
       (* (/ h 3)
          (+ (f a)
             (helper 1 n f a h))))))
#+end_src

But, this takes up more space than it needs to. We can convert
~simpson-integral~ to a tail-recursive function by adding an
accumulator parameter to the helper function. Now, our recursive
calls are not being operated on and all of its arguments can be
immediately computed. This eliminates recursive calls and reduces
our order of growth in space from /O(n)/ to /O(1)/. Pretty neat!

#+begin_src scheme :results list
  (define (simpson-integral f a b n)
    (define (helper current hi f a h acc)
      (let ([yk (f (+ a (* current h)))])
        (cond
         ((= current hi) (+ acc yk))
         ((odd? current)
          (helper (add1 current) hi f a h (+ acc (* 4 yk))))
         (else
          (helper (add1 current) hi f a h (+ acc (* 2 yk)))))))
    (let ([h (/ (- b a) n)])
      (exact->inexact
       (* (/ h 3)
          (+ (f a)
             (helper 1 n f a h 0))))))

  (define (cube x)
    (expt x 3))

  (list
   (simpson-integral cube 0 1 100)
   (simpson-integral cube 0 1 1000)
   )
#+end_src

#+RESULTS:
- 0.25
- 0.25

In addition to being "pretty neat," the iterative version of
~simpson-integral~ also works, which is a definite plus. These
results match the results above, meaning that we've implemented
the procedure correctly.
