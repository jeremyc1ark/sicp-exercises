*Exercise 2.77:* Louis Reasoner tries to evaluate the expression
`(magnitude z)' where `z' is the object shown in *Note Figure
2-24::.  To his surprise, instead of the answer 5 he gets an error
message from `apply-generic', saying there is no method for the
operation `magnitude' on the types `(complex)'.  He shows this
interaction to Alyssa P. Hacker, who says "The problem is that the
complex-number selectors were never defined for `complex' numbers,
just for `polar' and `rectangular' numbers.  All you have to do to
make this work is add the following to the `complex' package:"

    (put 'real-part '(complex) real-part)
    (put 'imag-part '(complex) imag-part)
    (put 'magnitude '(complex) magnitude)
    (put 'angle '(complex) angle)

Describe in detail why this works.  As an example, trace through
all the procedures called in evaluating the expression `(magnitude
z)' where `z' is the object shown in *Note Figure 2-24::.  In
particular, how many times is `apply-generic' invoked?  What
procedure is dispatched to in each case?

This works because it adds the missing operations to the dispatch table, which Reasoner had not done. When Reasoner ran his program, ~magnitude~ tried to use ~apply-generic~ with ~'magnitude~ as the operation argument and the data strcuture from Figure 2-24 as the list of arguments to be applied. ~apply-generic~ then used ~get~ with ~'magnitude~ as the operation argument and the outermost tag of the data structure, which in this case was ~'complex~, as the type argument. However, the dispatch table did not have an operation for this until Hacker added the line:

~(put 'magnitude '(complex) magnitude)~

With this new line, plus the selectors ~real-part~ and ~imag-part~ installed onto the dispatch table, Hacker gave the operations needed to operate on Reasoner's data structure. Here's the process that ~(magnitude z)~ would generate:

#+begin_src scheme :results silent
(magnitude (list 'complex
                 (list 'rectangular
                       (list 'scheme-number 3)
                       (list 'scheme-number 4))))

(apply-generic 'magnitude
               (list 'complex
                     (list 'rectangular
                           (list 'scheme-number 3)
                           (list 'scheme-number 4))))

((get 'magnitude '(complex)) (list 'rectangular
                                   (list 'scheme-number 3)
                                   (list 'scheme-number 4)))

(magnitude (list 'rectangular
                 (list 'scheme-number 3)
                 (list 'scheme-number 4)))

(apply-generic 'magnitude
               (list 'rectangular
                     (list 'scheme-number 3)
                     (list 'scheme-number 4)))

((get 'magnitude '(rectangular)) (list (list 'scheme-number 3)
                                       (list 'scheme-number 4)))

(magnitude (list (list 'scheme-number 3)
                 (list 'scheme-number 4)))

(apply-generic 'magnitude
               (list (list 'scheme-number 3)
                     (list 'scheme-number 4)))

((get 'magnitude '(scheme-number scheme-number)) (list 3 4))

(attach-tag 'scheme-number (magnitude 3 4))

(attach-tag 'scheme-number (sqrt (+ (sqr 3) (sqr 4))))

(attach-tag 'scheme-number (sqrt (+ 9 16)))

(attach-tag 'scheme-number (sqrt 25))

(attach-tag 'scheme-number 5)

(list 'scheme-number 5)
#+end_src
