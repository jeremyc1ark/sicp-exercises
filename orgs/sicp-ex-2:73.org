*Exercise 2.73:* Section *Note 2-3-2:: described a program that
performs symbolic differentiation:

    (define (deriv exp var)
    (cond ((number? exp) 0)
            ((variable? exp) (if (same-variable? exp var) 1 0))
            ((sum? exp)
            (make-sum (deriv (addend exp) var)
                        (deriv (augend exp) var)))
            ((product? exp)
            (make-sum
                (make-product (multiplier exp)
                            (deriv (multiplicand exp) var))
                (make-product (deriv (multiplier exp) var)
                            (multiplicand exp))))
            <MORE RULES CAN BE ADDED HERE>
            (else (error "unknown expression type -- DERIV" exp))))

We can regard this program as performing a dispatch on the type of
the expression to be differentiated.  In this situation the "type
tag" of the datum is the algebraic operator symbol (such as `+')
and the operation being performed is `deriv'.  We can transform
this program into data-directed style by rewriting the basic
derivative procedure as

    (define (deriv exp var)
        (cond ((number? exp) 0)
            ((variable? exp) (if (same-variable? exp var) 1 0))
            (else ((get 'deriv (operator exp)) (operands exp)
                                                var))))

    (define (operator exp) (car exp))

    (define (operands exp) (cdr exp))

a. Explain what was done above.  Why can't we assimilate the
    predicates `number?' and `same-variable?' into the
    data-directed dispatch?

b. Write the procedures for derivatives of sums and products,
    and the auxiliary code required to install them in the table
    used by the program above.

c. Choose any additional differentiation rule that you like,
    such as the one for exponents (*Note Exercise 2-56::), and
    install it in this data-directed system.

d. In this simple algebraic manipulator the type of an
    expression is the algebraic operator that binds it together.
    Suppose, however, we indexed the procedures in the opposite
    way, so that the dispatch line in `deriv' looked like

        ((get (operator exp) 'deriv) (operands exp) var)

    What corresponding changes to the derivative system are
    required?


*Part A*
Essentially, ~deriv~ is using the operators as tags, which it can use to dispatch procedures from an externally located dispatch table. Once it confirms that ~exp~ is not a number or a variable, it accesses the appropriate procedure to operate on the expression from the dispatch table using the ~get~ procedure. It passes 'deriv as the operation and the first operator as the type into ~get~, which would retrieve a procedure from the dispatch table based on these two arguments. ~number?~ and ~variable?~ cannot be assimilated into the data-directed dispatch because they do not conform to the standards of the dispatch table. The dispatch table has /types/ such as 'deriv and /operations/ such as ~+~. The predicates simply would not fit in the table because they are not operations for a specific type; they are meant to take any data structure in as an argument. Trying to add ~number?~ and ~variable?~ to the dispatch table would be like trying to add the procedures ~polar?~ and ~rectangular?~ to the dispatch table for the complex number system; they do not fit anywhere. They are neither selectors nor constructors. They are predicates instead. As a general rule, predicates should never go into a dispatch table because they are not specific to a single type.

*Part B and Part C*

#+begin_src scheme :results silent
(define (install-deriv-package)
  (define (product exp var)
    (make-sum
     (make-product (multiplier exp)
                   (deriv (multiplicand exp) var))
     (make-product (deriv (multiplier exp) var)
                   (multiplicand exp))))

  (define (sum exp var)
    (make-sum (deriv (addend exp) var)
              (deriv (augend exp) var)))

  (define (exponent exp var)
    (make-product (make-product (exponent exp)
                                (make-exponentation (base exp)
                                                    (sub1 (exponent exp))))
                  (deriv (base exp) var)))

  ;; Installation
  (put '(deriv) '* product)
  (put '(deriv) '+ sum)
  (put '(deriv) '** exponent))
#+end_src

*Part D*
Well this is just a quick modification. In the change shown above, the arguments of ~get~ have been switched around. In the original procedure, ~'deriv~ was ~get~\s first argument and ~(operator exp)~ was the second. The first parameter of ~get~ represents the operator and the second parameter represents the type. Because ~get~\'s arguments represent the operation and then the type, this means that the axes of the dispatch table have been switched. Now, the operator tag represents the operation and ~'deriv~ represents the type. So, when installing procedures with ~install-deriv-package~, we just need to make sure that the the arguments for ~put~ are switched around as well, like so:

#+begin_src scheme :results silent
(put '* '(deriv) product)
(put '+ '(deriv) sum)
(put '** '(deriv) exponent)
#+end_src
