*Exercise 2.14:* After considerable work, Alyssa P. Hacker
delivers her finished system.  Several years later, after she has
forgotten all about it, she gets a frenzied call from an irate
user, Lem E. Tweakit. It seems that Lem has noticed that the
formula for parallel resistors can be written in two
algebraically equivalent ways:

R_1 R_2
---------
R_1 + R_2

and

    1
-------------
1/R_1 + 1/R_2

He has written the following two programs, each of which computes
the parallel-resistors formula differently:

(define (par1 r1 r2)
(div-interval (mul-interval r1 r2)
              (add-interval r1 r2)))

(define (par2 r1 r2)
(let ((one (make-interval 1 1)))
  (div-interval one
                (add-interval (div-interval one r1)
                              (div-interval one r2)))))

Lem complains that Alyssa's program gives different answers for
the two ways of computing. This is a serious complaint.

Demonstrate that Lem is right.  Investigate the
behavior of the system on a variety of arithmetic expressions.
Make some intervals A and B, and use them in computing the
expressions A/A and A/B.  You will get the most insight by using
intervals whose width is a small percentage of the center value.
Examine the results of the computation in center-percent form (see
*Note Exercise 2-12::).

#+begin_src scheme :results output
  (define (make-center-pct center pct) (cons center pct))
  (define (center interval) (car interval))
  (define (pct interval) (cdr interval))
  (define (lower-bound interval) (- (center interval) (* (center interval) (/ (pct interval) 100.0))))
  (define (upper-bound interval) (+ (center interval) (* (center interval) (/ (pct interval) 100.0))))

  (define (add-interval x y)
    (make-center-pct (+ (lower-bound x) (lower-bound y))
                   (+ (upper-bound x) (upper-bound y))))

  (define (mul-interval x y)
    (let ((p1 (* (lower-bound x) (lower-bound y)))
          (p2 (* (lower-bound x) (upper-bound y)))
          (p3 (* (upper-bound x) (lower-bound y)))
          (p4 (* (upper-bound x) (upper-bound y))))
      (make-center-pct (min p1 p2 p3 p4)
                     (max p1 p2 p3 p4))))

  (define (div-interval x y)
    (mul-interval x
                  (make-center-pct (/ 1.0 (upper-bound y))
                                 (/ 1.0 (lower-bound y)))))

  (define (par1 r1 r2)
    (div-interval (mul-interval r1 r2)
                  (add-interval r1 r2)))

  (define (par2 r1 r2)
    (let ((one (make-center-pct 1 1)))
      (div-interval one
                    (add-interval (div-interval one r1)
                                  (div-interval one r2)))))

  (define A (make-center-pct 3234348 0.2))
  (define B (make-center-pct 547945345 0.4))

  (define (printer repr val)
    (display (~a
              repr ":\n"
              "Center = " (center val) "\n"
              "Tolerance (%) = " (pct val) "\n\n")))

  (for ([args (list
               (cons "(par1 A B)" (par1 A B))
               (cons "(par2 AB)" (par2 A B))
               (cons "(par1 AA)" (par1 A A))
               (cons "(par2 AA)" (par2 A A)))])
    (printer (car args) (cdr args)))
#+end_src

#+RESULTS:
#+begin_example
(par1 A B):
Center = -10338551658919.75
Tolerance (%) = 10338551658920.912

(par2 AB):
Center = -106965764554.31044
Tolerance (%) = 106972338403.75592

(par1 AA):
Center = -2615200937375.373
Tolerance (%) = 2615200937425.1724

(par2 AA):
Center = -27056611108.474056
Tolerance (%) = 27059917396.21477

#+end_example

We have demonstrated that Lem is correct.
