#+TITLE: Exercise 2.45
`Right-split' and `up-split' can be expressed as instances of a
general splitting operation.  Define a procedure `split' with the
property that evaluating

    (define right-split (split beside below))
    (define up-split (split below beside))

produces procedures `right-split' and `up-split' with the same
behaviors as the ones already defined.

#+header: :eval "no"
#+begin_src scheme
(define (split out in)
  (define (helper painter n)
    (if (= n 0)
        painter
        (let ([smaller (helper painter (sub1 n))])
          (out painter (in smaller smaller)))))
  helper)
#+end_src
