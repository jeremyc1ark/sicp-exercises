#+TITLE: Exercise 2.51
Define the `below' operation for painters. `Below' takes two
painters as arguments.  The resulting painter, given a frame,
draws with the first painter in the bottom of the frame and with
the second painter in the top.  Define `below' in two different
ways--first by writing a procedure that is analogous to the
`beside' procedure given above, and again in terms of `beside'
and suitable rotation operations (from *Note Exercise 2-50::).

Here is the implementation analogous to ~beside~:

#+header: :eval "no"
#+begin_src scheme
(define (below painter1 painter2)
  (let* ([split-point (make-vect 0.0 0.5)]
         [paint-down (transform-painter painter1
                                        (make-vect 0.0 0.0)
                                        (make-vect 1.0 0.0)
                                        split-point)]
         [paint-up (transform-painter painter2
                                      split-point
                                      (make-vect 1.0 0.5)
                                      (make-vect 0.0 1.0))])
    (lambda (frame)
      (paint-down frame)
      (paint-up frame))))
#+end_src

Here is the implementation that uses ~beside~ and ~rot-270~,
which was defined in a previous exercise:

#+header: :eval "no"
#+begin_src scheme
(define (below painter1 painter2)
  (let ([split-horz (beside painter1 painter2)])
    (rot-270 split-horz)))
#+end_src
