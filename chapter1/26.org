#+PROPERTY: header-args :eval no
*Exercise 1.26:* Louis Reasoner is having great difficulty doing
*Note Exercise 1-24::.  His `fast-prime?' test seems to run more
slowly than his `prime?' test.  Louis calls his friend Eva Lu Ator
over to help.  When they examine Louis's code, they find that he
has rewritten the `expmod' procedure to use an explicit
multiplication, rather than calling `square':

    (define (expmod base exp m)
      (cond ((= exp 0) 1)
            ((even? exp)
              (remainder (* (expmod base (/ exp 2) m)
                            (expmod base (/ exp 2) m))
                        m))
            (else
              (remainder (* base (expmod base (- exp 1) m))
                        m))))

"I don't see what difference that could make," says Louis.  "I
do."  says Eva.  "By writing the procedure like that, you have
transformed the [theta](`log' n) process into a [theta](n)
process."  Explain.

Let's compare ~expmod~'s original recursive call with Reasoner's
recursive call.

#+begin_src scheme
  ;; Original
  (sqr (expmod base (/ exp 2) m))

  ;; Reasoner
  (* (expmod base (/ exp 2) m)
     (expmod base (/ exp 2) m))
#+end_src

I think what Reasoner fails to realize is that his recursive call
will result in 'tree recursion', where each recursive call uses
multiple recursive calls. In the original recursive call, one
call to the function means one recursive call to the same
function with different arguments. Reasoner's recursive call
means two calls to the function. Let's look at the worst-case
scenario, where Reasoner's ~expmod~ is called with a large power
of 2:

                          (5 256 43)
       (5 128 43)             *            (5 128 43)
(5 64 43) * (5 64 43)         *       (5 64 43) * (5 64 43)
    .          .                          .            .
    .          .                          .            .
    .          .                          .            .
       

After just two recursive calls, I've already run out of space.
This takes up a lot of space and repeats a lot of computation.
There is no point in computing ~(expmod 5 64 43)~ four times when
we could have just done it once. Reasoner's version of ~expmod~
has the same number of "levels" as the original version, but in
the worst case, the number of recursive calls doubles on each
level. When a quantity doubles n times, it will be 2 ^ n. So, for
the worst case scenario of Reasoner's function, the order of
growth is /O(log(2 ^ n))/. This can be rewritten as
/O(n * log(2))/, which is the same as /O(n)/. So, Lu Ator is correct.
Reasoner should stick with the original implemenation.
