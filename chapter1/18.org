*Exercise 1.18:* Using the results of *Note Exercise 1-16:: and
*Note Exercise 1-17::, devise a procedure that generates an
iterative process for multiplying two integers in terms of adding,
doubling, and halving and uses a logarithmic number of steps.(4)

#+begin_src scheme :eval no
(define (double y)
  (* 2 y)
  )

(define (halve x)
  (/ x 2)
  )

(define (*-iter a b)
  (define (helper ah bh acc)
    (cond
     ((= bh 1) (+ ah acc))
     ((even? bh) (helper (double ah) (halve bh) acc))
     (else (helper ah (- bh 1) (+ acc ah))))
    )
  (helper a b 0)
 )
#+end_src

~*-iter~'s recursive calls can evaluate their arguments right
away, and they are not operated on externally. This means that it
is an iterative process.
