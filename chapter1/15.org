*Exercise 1.15:* The sine of an angle (specified in radians) can
be computed by making use of the approximation `sin' xapprox x if
x is sufficiently small, and the trigonometric identity

                    x             x
    sin x = 3 sin --- - 4 sin^3 ---
                    3             3

to reduce the size of the argument of `sin'.  (For purposes of this
exercise an angle is considered "sufficiently small" if its
magnitude is not greater than 0.1 radians.) These ideas are
incorporated in the following procedures:

    (define (cube x) (* x x x))

    (define (p x) (- (* 3 x) (* 4 (cube x))))

    (define (sine angle)
        (if (not (> (abs angle) 0.1))
            angle
            (p (sine (/ angle 3.0)))))

  a. How many times is the procedure `p' applied when `(sine
    12.15)' is evaluated?
#+begin_src scheme :eval no
  (require racket/trace)

  (define (cube x) (* x x x))

  (define (p x) (- (* 3 x) (* 4 (cube x))))

  (define (sine angle)
    (if (not (> (abs angle) 0.1))
        angle
        (p (sine (/ angle 3.0)))))

  (trace p)

  (sine 12.15)
#+end_src

=> -0.39980345741334

>(p 0.049999999999999996)
<0.1495
>(p 0.1495)
<0.4351345505
>(p 0.4351345505)
<0.9758465331678772
>(p 0.9758465331678772)
<-0.7895631144708228
>(p -0.7895631144708228)
<-0.39980345741334

~p~ is applied 5 times when ~(sine 12.15)~ is evaluated.

  b. What is the order of growth in space and number of steps (as
    a function of a) used by the process generated by the `sine'
    procedure when `(sine a)' is evaluated?

The order of growth in number of steps is /O(log(a))/. The
recursive call in ~(sine a)~ is ~(p (sine (/ a 3.0)))~ and this
will only execute if the absolute value of ~a~ is less than 0.1. So, ~sine~ will keep
calling itself recursively until ~a~ reaches that base case. ~a~
is divided by three at each step of recursion, so if ~(sine a)~
has 5 steps, we would need to call ~(sine (* 3) a)~ to get six
steps. The input of ~a~ must increase at /a * 3 ^ n/ where n is
the number of steps we want. For n to increase linearly, a must
increase exponentially.

In this case, space increases proportional to time. So, the order
of growth in space is also /O(log(a))/.

