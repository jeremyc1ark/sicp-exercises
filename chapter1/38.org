*Exercise 1.38:* In 1737, the Swiss mathematician Leonhard Euler
published a memoir `De Fractionibus Continuis', which included a
continued fraction expansion for e - 2, where e is the base of the
natural logarithms.  In this fraction, the n_i are all 1, and the
D_i are successively 1, 2, 1, 1, 4, 1, 1, 6, 1, 1, 8, ....  Write
a program that uses your `cont-frac' procedure from *Note Exercise
1-37:: to approximate e, based on Euler's expansion.

#+begin_src scheme
  (define (cont-frac n d k)
    (define (helper i acc)
      (if
       (= i 1)
       (/ (n 1) acc)
       (helper
        (sub1 i)
        (+ (d (sub1 i))
           (/ (n i) acc)))))
    (helper (sub1 k) (/ (n k) (d k))))

  (define (fractionibus-continuis accuracy)
    (define (d i)
      (if (or (= 1 2) (= i 1))
          i
          (let ([j (- i 2)])
            (if (zero? (modulo j 3))
                (+ 2 (* 2 (/ j 3)))
                1))))
    (cont-frac (lambda (x) 1.0) d accuracy))

  (+ 2 (fractionibus-continuis 1000))
#+end_src

#+RESULTS:
: 2.7182818284590455

The hardest part about this exercise was actually figuring out
how to write ~d~. That took a bit of creativity.
