*Exercise 1.22:* Most Lisp implementations include a primitive
called `runtime' that returns an integer that specifies the amount
of time the system has been running (measured, for example, in
microseconds).  The following `timed-prime-test' procedure, when
called with an integer n, prints n and checks to see if n is
prime.  If n is prime, the procedure prints three asterisks
followed by the amount of time used in performing the test.

    (define (timed-prime-test n)
      (newline)
      (display n)
      (start-prime-test n (runtime)))

    (define (start-prime-test n start-time)
      (if (prime? n)
          (report-prime (- (runtime) start-time))))

    (define (report-prime elapsed-time)
      (display " *** ")
      (display elapsed-time))

Using this procedure, write a procedure `search-for-primes' that
checks the primality of consecutive odd integers in a specified
range.  Use your procedure to find the three smallest primes
larger than 1000; larger than 10,000; larger than 100,000; larger
than 1,000,000.  Note the time needed to test each prime.  Since
the testing algorithm has order of growth of [theta](_[sqrt]_(n)),
you should expect that testing for primes around 10,000 should
take about _[sqrt]_(10) times as long as testing for primes around
1000.  Do your timing data bear this out?  How well do the data
for 100,000 and 1,000,000 support the _[sqrt]_(n) prediction?  Is
your result compatible with the notion that programs on your
machine run in time proportional to the number of steps required
for the computation?

#+name: src-main
#+begin_src scheme :results silent
  (require racket/format)

  (define (smallest-divisor n)
    (find-divisor n 2))

  (define (find-divisor n test-divisor)
    (cond ((> (sqr test-divisor) n)
           n)
          ((divides? test-divisor n)
           test-divisor)
          (else (find-divisor
                 n
                 (+ test-divisor 1)))))

  (define (divides? a b)
    (= (remainder b a) 0))

  (define (prime? n)
    (= n (smallest-divisor n)))

  (define (search-for-primes lo hi)
    (define (helper current hi [prime-data null])
      (let* ([begin (current-inexact-milliseconds)]
             [is-prime (prime? current)]
             [end (current-inexact-milliseconds)]
             [total-time (* 1000 (- end begin))])
        (cond ((or (= (length prime-data) 3) (>= current hi)) prime-data)
              (is-prime (helper (+ 2 current) hi (cons (list current total-time) prime-data)))
              (else (helper (+ 2 current) hi prime-data))
            ))
      )
    (if (odd? lo)
        (helper lo hi)
        (helper (add1 lo) hi))
        )
  (define prime-search-data (map search-for-primes
                                (list 1000 10000 100000)
                                (list 1100 10100 100100)))
#+end_src

#+begin_src scheme :results output :noweb yes
  <<src-main>>
  (define (prime-search-display prime-data)
    (for ([pair prime-data])
      (display
       (~a "Took "
           (cadr pair)
           " milliseconds to confirm that "
           (car pair)
           " is a prime number"
           "\n"))
      )
    (display "Done.\n")
    )

  (map prime-search-display prime-search-data)
#+end_src

#+RESULTS:
#+begin_example
Took 0.9765625 milliseconds to confirm that 1019 is a prime number
Took 0.9765625 milliseconds to confirm that 1013 is a prime number
Took 0.0 milliseconds to confirm that 1009 is a prime number
Done.
Took 1.953125 milliseconds to confirm that 10037 is a prime number
Took 1.953125 milliseconds to confirm that 10009 is a prime number
Took 1.953125 milliseconds to confirm that 10007 is a prime number
Done.
Took 5.859375 milliseconds to confirm that 100043 is a prime number
Took 6.103515625 milliseconds to confirm that 100019 is a prime number
Took 6.103515625 milliseconds to confirm that 100003 is a prime number
Done.
#+end_example

As we can see, the time complexity increases significantly as the
size of the primes increase. But, is this pattern of growth
consistent with /O(sqrt(n))/, the theoretical order of growth for
the ~prime?~ algorithm? Let's find out.

#+begin_src scheme :noweb yes :results list
  <<src-main>>
  (require math/statistics)
  (define total-time-means
   (map
    (lambda (x) (mean (map cadr x)))
    prime-search-data)
   )

  (list
   (car total-time-means)
   (/ (cadr total-time-means) (sqrt 10))
   (/ (/ (caddr total-time-means) (sqrt 10)) (sqrt 10)))
#+end_src

#+RESULTS:
- 0.6510416666666666
- 0.6176323555016365
- 0.6998697916666666

The data support the hypothesis presented in the question.
This result is compatible with the notion that programs on my
machine run in time proportional to the number of steps required
for the computation. By analyzing the ~prime?~ procedure, we were
able to deduce the approximate order of growth in steps, which
was /O(sqrt(n))/. We see that the time it takes to compute
~prime?~ has this same order of growth, meaning that time and
number of steps are proportional in this case. Without performing
further tests, it is also safe to assume that time and number of
steps are proportional in all normal computing contexts. A step
takes a certain amount of time, so the more steps performed, the
more time consumed.
