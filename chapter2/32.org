#+TITLE: Exercise 2.32
We can represent a set as a list of distinct elements, and we can
represent the set of all subsets of the set as a list of lists.
For example, if the set is `(1 2 3)', then the set of all subsets
is `(() (3) (2) (2 3) (1) (1 3) (1 2) (1 2 3))'.  Complete the
following definition of a procedure that generates the set of
subsets of a set and give a clear explanation of why it works:

    (define (subsets s)
        (if (null? s)
            (list nil)
            (let ((rest (subsets (cdr s))))
                (append rest (map <??> rest)))))


#+begin_src scheme :results output
(define (subsets s)
    (if (null? s)
        (list null)
        (let ([rest (subsets (cdr s))])
          (append rest (map
                        (lambda (x) (cons (car s) x))
                        rest)))))

(display (subsets (list 1 2 3)))
#+end_src

#+RESULTS:
: (() (3) (2) (2 3) (1) (1 3) (1 2) (1 2 3))

This procedure takes advantage of the simple fact that for any
given number in a set, all subsets either have that number or
they do not. For example, take the set {1, 2, 3}. The union of
the set of all subsets with the number 3 and the set of all
subsets without the number 3 is the set of all subsets of {1, 2,
3}. This is obvious, but it has serious implications.

~subsets~ begins with its terminating condition by checking
whether its only argument ~s~ is null. If so, it returns a list
with ~null~ inside. This represents the initial formation of the
set of subsets, onto which the remaining subsets will be appended
to.

If ~s~ is not null, we move onto the ~else~ statement. The ~else~
statement is enclosed in a ~let~ statement, the variable of
which we must compute before returning a value. ~let~ sets ~rest~
to a recursive call of ~subsets~ on the "rest" (~cdr~) of the
set. So, ~(subsets (list 1 2 3))~ would need to compute
 ~(subsets (list 2 3))~, which would need to compute
 ~(subsets (list 3))~, which would then need to compute
  ~(subsets null)~. It makes logical sense that we would take
these computational steps. We can determine the set of all
subsets of {1, 2, 3} (Y) by determining the set of all subsets of
{2, 3} (X). The set of all subsets of Y would be the union of X
with another set of subsets Z, which could be created by adding 1
to all subsets in X. This pattern continues for finding the set
of subsets for {2, 3} (Y), where we can consider the set of subsets
of {3} (X) and determine the union of X and a a copy of X with 2
added to each subset.

At the terminal condition, we can begin working up, forming
larger and larger sets of subsets. The terminal condition is true
if the given set is null (empty). The set of all subsets of an
empty set would be a set with an empty set inside. With this
information, we can now compute the set of all subsets of {3}
(Y), which will be the union of the set of all the subsets of {}
(X) with a copy of X where 3 is added to every element. We have
just computed X, so we can easily compute that the set of all
subsets of Y is {{}, {3}}. Now, hopefully you can see that we can
determine the set of all subsets of {2, 3} using the set we just
computed.

At every cycle of recursion in ~subsets~, we compute the set of
subsets of the ~cdr~ of our set ~s~ (X). X is the set of all
subsets of the set without the ~car~ of ~s~. Using the axiom we
explored earlier, we know that the set of all subsets of ~s~ will
be the union of X with the *set created by adding the ~car~ of ~s~*
*to every element of X.* The bolded part can be created with a
map of ~rest~ using the simple ~lambda~ that I have defined.

As I was writing this explanation, it struck me that one could
define ~subsets~ iteratively by starting from the terminating
condition (an empty list) and working up. This would save memory,
so I thought I would try it out.

#+begin_src scheme :results output
(define (helper s r)
  (if (null? s)
      r
      (helper (cdr s)
              (append r (map (lambda (x) (cons (car s) x)) r)))))

(define (subsets s)
  (helper s (list null)))

(display (subsets (list 1 2 3)))
#+end_src

#+RESULTS:
: (() (1) (2) (2 1) (3) (3 1) (3 2) (3 2 1))

Much more efficient!
