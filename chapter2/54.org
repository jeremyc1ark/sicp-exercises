#+TITLE: Exercise 2.54
Two lists are said to be `equal?' if they contain equal elements
arranged in the same order.  For example,

          (equal? '(this is a list) '(this is a list))

     is true, but

          (equal? '(this is a list) '(this (is a) list))

is false.  To be more precise, we can define `equal?'
recursively in terms of the basic `eq?' equality of symbols by
saying that `a' and `b' are `equal?' if they are both symbols and
the symbols are `eq?', or if they are both lists such that `(car
a)' is `equal?' to `(car b)' and `(cdr a)' is `equal?' to `(cdr
b)'.  Using this idea, implement `equal?' as a procedure.(5)

#+begin_src scheme :results output
(define (both proc x y)
  (and (proc x) (proc y)))

(define (either proc x y)
  (or (proc x) (proc y)))

(define (equal? a b)
  (cond
   ((both null? a b) #t)
   ((both list? (car a) (car b))
    (and (equal? (car a) (car b)) (equal? (cdr a) (cdr b))))
   ((not (either list? (car a) (car b)))
    (and (eq? (car a) (car b)) (equal? (cdr a) (cdr b))))
   (else #f)))

(display (equal? '(this is a list) '(this is a list)))
(display "\n")
(display (equal? '(this is a list) '(this '(is a) list)))
#+end_src

#+RESULTS:
: #t
: #f
