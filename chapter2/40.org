#+TITLE: Exercise 2.40
Define a procedure `unique-pairs' that, given an integer n,
generates the sequence of pairs (i,j) with 1 <= j< i <= n.  Use
`unique-pairs' to simplify the definition of `prime-sum-pairs'
given above.

#+begin_src scheme :results list
(require math/number-theory)

(define (fold-left op initial sequence)
    (define (iter result remaining)
            (if (null? remaining)
                result
                (iter (op result (car remaining))
                    (cdr remaining))))
    (iter initial sequence))

(define (fold-right op initial sequence)
   (if (null? sequence)
       initial
       (op (car sequence)
           (fold-right op initial (cdr sequence)))))

(define (enumerate-interval lo hi)
  (if (> lo hi)
      null
      (cons lo (enumerate-interval (add1 lo) hi))))

(define (flatmap proc seq)
    (fold-right append null (map proc seq)))

(define (unique-pairs n)
  (flatmap
   (lambda (i)
     (map
      (lambda (j) (list i j))
      (enumerate-interval 1 (- i 1))))
   (enumerate-interval 1 n)))

(define (prime-sum? pair)
    (prime? (+ (car pair) (cadr pair))))

(define (make-pair-sum pair)
    (list (car pair) (cadr pair) (+ (car pair) (cadr pair))))

(define (prime-sum-pairs n)
  (map make-pair-sum
       (filter prime-sum?
               (unique-pairs n))))

(prime-sum-pairs 7)
#+end_src

#+RESULTS:
- (2 1 3)
- (3 2 5)
- (4 1 5)
- (4 3 7)
- (5 2 7)
- (6 1 7)
- (6 5 11)
- (7 4 11)
- (7 6 13)
