#+TITLE: Exercise 2.30
Define a procedure `square-tree' analogous to the `square-list'
procedure of *Note Exercise 2-21::.  That is, `square-list'
should behave as follows:

    (square-tree
        (list 1
            (list 2 (list 3 4) 5)
            (list 6 7)))
    (1 (4 (9 16) 25) (36 49))

Define `square-tree' both directly (i.e., without using any
higher-order procedures) and also by using `map' and recursion.

Let's define the input so that we don't have to rewrite the test input.

#+name: input
#+begin_src scheme
(define test-list (list 1
                        (list 2 (list 3 4) 5)
                        (list 6 7)))
#+end_src

Here is the direct implementation without the use of higher-order
procedures:

#+begin_src scheme :noweb yes :results output
<<input>>

(define (square-tree tree)
  (cond
    ((null? tree) null)
    ((list? (car tree))
     (cons (square-tree (car tree))
           (square-tree (cdr tree))))
    (else (cons (sqr (car tree))
                (square-tree (cdr tree))))))

(display (square-tree test-list))
#+end_src

#+RESULTS:
: (1 (4 (9 16) 25) (36 49))

Here is the implementation that uses ~map~ and a higher-order
anonymous procedure:

#+begin_src scheme :noweb yes :results output
<<input>>

(define (square-tree tree)
  (map (lambda (sub-tree)
         (if (list? sub-tree)
             (square-tree sub-tree)
             (sqr sub-tree)))
       tree))

(display (square-tree test-list))
#+end_src

#+RESULTS:
: (1 (4 (9 16) 25) (36 49))

We get the same result, but this implementation is more concise
and easier to understand.
