*Exercise 2.2:* Consider the problem of representing line segments
in a plane.  Each segment is represented as a pair of points: a
starting point and an ending point.  Define a constructor
`make-segment' and selectors `start-segment' and `end-segment'
that define the representation of segments in terms of points.
Furthermore, a point can be represented as a pair of numbers: the
x coordinate and the y coordinate.  Accordingly, specify a
constructor `make-point' and selectors `x-point' and `y-point'
that define this representation.  Finally, using your selectors
and constructors, define a procedure `midpoint-segment' that takes
a line segment as argument and returns its midpoint (the point
whose coordinates are the average of the coordinates of the
endpoints).  To try your procedures, you'll need a way to print
points:

    (define (print-point p)
      (newline)
      (display "(")
      (display (x-point p))
      (display ",")
      (display (y-point p))
      (display ")"))

#+begin_src scheme :results output
  (require math/statistics)

  (define (make-segment a b) (cons a b))
  (define (start-segment s) (car s))
  (define (end-segment s) (cdr s))

  (define (point x y) (cons x y))
  (define (x-point p) (car p))
  (define (y-point p) (cdr p))

  (define (midpoint-segment s)
    ;; `let*' makes function easier to understand
    (let* ([start (start-segment s)]
           [end (end-segment s)]
           [start-x (x-point start)]
           [start-y (y-point start)]
           [end-x (x-point end)]
           [end-y (y-point end)])
      (point (mean (list start-x end-x))
             (mean (list start-y end-y)))))

  (define (print-point p)
    (display "(")
    (display (x-point p))
    (display ", ")
    (display (y-point p))
    (display ")"))

  (print-point
   (midpoint-segment
    (make-segment (point 7.0 9.0) (point 4.0 80.0))))
#+end_src

#+RESULTS:
: (5.5, 44.5)
