*Exercise 2.94:* Using `div-terms', implement the procedure
`remainder-terms' and use this to define `gcd-terms' as above.
Now write a procedure `gcd-poly' that computes the polynomial GCD
of two polys.  (The procedure should signal an error if the two
polys are not in the same variable.)  Install in the system a
generic operation `greatest-common-divisor' that reduces to
`gcd-poly' for polynomials and to ordinary `gcd' for ordinary
numbers. As a test, try

    (define p1 (make-polynomial 'x '((4 1) (3 -1) (2 -2) (1 2))))
    (define p2 (make-polynomial 'x '((3 1) (1 -1))))
    (greatest-common-divisor p1 p2)

and check your result by hand.

#+begin_src scheme :results silent
(define (remainder-terms L1 L2)
  (cdr (div-terms L1 L2)))

(define (gcd-terms l1 l2)
  (if (empty-termlist? l1)
      l2
      (gcd-terms l2 (remainder-terms l1 l2))))

(define (gcd-poly p1 p2)
  (let ((p1-var (variable p1))
        (p2-var (variable p2))
        (p1-terms (term-list p1))
        (p2-terms (term-list p2)))
    (if (not (eq? p1-var p2-var))
           (error "Cannot determine the GCD of two polynomials with different variables")
           (else (gcd-terms p1-terms p2-terms)))))

(put 'greatest-common-divisor '(poly poly) gcd-poly)
(put 'greatest-common-divisor '(scheme-number scheme-number) gcd)

(define (greatest-common-divisor a b)
  (apply-generic 'greatest-common-divisor a b))
#+end_src

First, ~greatest-common-divisor~ would access the dispatch table. It would see that ~p1~ and ~p2~ are both polynomials, so it would find the proper operation that corresponds to a pair of polynomials and ~'greatest-common-divisor~: ~gcd-poly~.

#+begin_src scheme :results silent
(greatest-common-divisor p1 p2)

(gcd-poly p1 p2)

(gcd-poly p2 (remainder-terms p1 p2))

(gcd-poly p2 (cdr (div-terms p1 p2)))
#+end_src

Ok, it goes on like this for a long time. Checking my result by hand does not contribute to my learning. I will be going on to the next exercise now.
