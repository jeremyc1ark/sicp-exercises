*Exercise 2.57:* Extend the differentiation program to handle sums
and products of arbitrary numbers of (two or more) terms.  Then
the last example above could be expressed as

    (deriv '(* x y (+ x 3)) 'x)

Try to do this by changing only the representation for sums and
products, without changing the `deriv' procedure at all.  For
example, the `addend' of a sum would be the first term, and the
`augend' would be the sum of the rest of the terms.

#+begin_src scheme
(define (variable? x) (symbol? x))

(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))

(define (sum? x)
  (and (pair? x) (eq? (car x) '+)))

(define (addend s) (cadr s))

(define (augend s)
  (foldl make-sum 0 (cddr s)))

(define (product? x)
  (and (pair? x) (eq? (car x) '*)))

(define (multiplier p) (cadr p))

(define (multiplicand p)
  (foldl make-product 1 (cddr p)))

(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2)) (+ a1 a2))
        (else (list '+ a1 a2))))

(define (=number? exp num)
  (and (number? exp) (= exp num)))

(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2))
        (else (list '* m1 m2))))

(define (exponentation? e)
  (and (pair? e) (eq? (car e) '**)))

(define (base e)
  (cadr e))

(define (exponent e)
  (caddr e))

(define (make-exponentation b e)
  (cond ((=number? e 0) 1)
        ((=number? e 1) b)
        ((and (number? b) (number? e)) (expt b e))
        (else (list '** b e))))

(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((product? exp)
         (make-sum
          (make-product (multiplier exp)
                        (deriv (multiplicand exp) var))
          (make-product (deriv (multiplier exp) var)
                        (multiplicand exp))))
        ((exponentation? exp)
         (make-product (make-product (exponent exp)
                                     (make-exponentation (base exp)
                                                         (sub1 (exponent exp))))
                       (deriv (base exp) var)))
        (else
         (error "unknown expression type -- DERIV" exp))))

(deriv '(* x y (+ x 3)) 'x)
#+end_src

#+RESULTS:
| + | (* x y) | (* (+ x 3) y) |

All we need to change is ~multiplicand~ and ~augend~. Both of these prodedures select the second term in their respective operations. If we knew that these procedures would just be recieving an expression with two terms, we could simply have them return the second term in the expression. However, now we have to deal with expressions that have many terms. The fundamental principle, however, has not changed. The addend of ~(+ 8 5 6 7 0)~ is 8 and the augend is ~(+ 5 6 7 0)~. We can then simplify the augend to be 18. To implement this into code, we can use an accumulation function. For addition, our initial value is 0, our function is ~make-sum~ and our list is ~(cddr s)~. ~foldl~ then starts working down ~(cddr s)~, adding up all the terms of the augend until it is in its most simple form. A similar concept applies to ~multiplicand~, except the initial value is 1 and the operator is ~make-product~.
