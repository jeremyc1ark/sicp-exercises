*Exercise 2.11:* In passing, Ben also cryptically comments: "By
testing the signs of the endpoints of the intervals, it is
possible to break `mul-interval' into nine cases, only one of which
requires more than two multiplications."  Rewrite this procedure
using Ben's suggestion.

After debugging her program, Alyssa shows it to a potential user,
who complains that her program solves the wrong problem.  He wants
a program that can deal with numbers represented as a center value
and an additive tolerance; for example, he wants to work with
intervals such as 3.5 +/- 0.15 rather than [3.35, 3.65].  Alyssa
returns to her desk and fixes this problem by supplying an
alternate constructor and alternate selectors:

    (define (make-center-width c w)
      (make-interval (- c w) (+ c w)))

    (define (center i)
      (/ (+ (lower-bound i) (upper-bound i)) 2))

    (define (width i)
      (/ (- (upper-bound i) (lower-bound i)) 2))

Unfortunately, most of Alyssa's users are engineers.  Real
engineering situations usually involve measurements with only a
small uncertainty, measured as the ratio of the width of the
interval to the midpoint of the interval.  Engineers usually
specify percentage tolerances on the parameters of devices, as in
the resistor specifications given earlier.

Here is ~mul-interval~ rewritten per Bitdiddle's advice. This was
sort of a hassle. I could probably make it run faster by nesting
some ~cond~\s, but this makes the cases clearer. Of course, if
this were in a real program, I would sacrifice clarity for speed.

#+header: :eval "no"
#+begin_src scheme
  (define (make-interval a b) (cons a b))
  (define (lower-bound interval) (car interval))
  (define (upper-bound interval) (cdr interval))

  (define (mul-interval x y)
    (let ([lbx (lower-bound x)]
          [lby (lower-bound y)]
          [ubx (upper-bound x)]
          [uby (upper-bound y)])
      (cond
       ((and (positive? lbx) (positive? ubx) (positive? lby) (positive? uby))
        (make-interval (* lbx lby) (* ubx uby)))
       ((and (negative? lbx) (positive? ubx) (positive? lby) (positive? uby))
        (make-interval (* lbx uby) (* ubx uby)))
       ((and (negative? lbx) (negative? ubx) (positive? lby) (positive? uby))
        (make-interval (* lbx uby) (* ubx lby)))
       ((and (negative? lbx) (negative? ubx) (negative? lby) (positive? uby))
        (make-interval (* lbx uby) (* ubx lby)))
       ((and (negative? lbx) (negative? ubx) (negative? lby) (negative? uby))
        (make-interval (* ubx uby) (* lbx lby)))
       ((and (negative? lbx) (positive? ubx) (negative? lby) (positive? uby))
        (make-interval (min (* lbx uby) (* lby ubx)) (max (* lbx lby) (* ubx uby))))
       ((and (positive? lbx) (positive? ubx) (negative? lby) (negative? uby))
        (make-interval (* ubx uby) (* lbx lby)))
       ((and (positive? lbx) (positive? ubx) (negative? lby) (positive? uby))
        (make-interval (* ubx lby) (* ubx uby)))
       (else (make-interval (* lbx lby) (* ubx uby))))))
#+end_src
