#+TITLE: Exercise 2.37
Suppose we represent vectors v = (v_i) as sequences of numbers, and
matrices m = (m_(ij)) as sequences of vectors (the rows of the matrix).
For example, the matrix

     +-         -+
     |  1 2 3 4  |
     |  4 5 6 6  |
     |  6 7 8 9  |
     +-         -+

is represented as the sequence `((1 2 3 4) (4 5 6 6) (6 7 8 9))'.  With
this representation, we can use sequence operations to concisely
express the basic matrix and vector operations.  These operations
(which are described in any book on matrix algebra) are the following:

                                            __
     (dot-product v w)      returns the sum >_i v_i w_i

     (matrix-*-vector m v)  returns the vector t,
                                        __
                            where t_i = >_j m_(ij) v_j

     (matrix-*-matrix m n)  returns the matrix p,
                                           __
                            where p_(ij) = >_k m_(ik) n_(kj)

     (transpose m)          returns the matrix n,
                            where n_(ij) = m_(ji)

   We can define the dot product as(4)

     (define (dot-product v w)
       (accumulate + 0 (map * v w)))

Fill in the missing expressions in the following procedures for
computing the other matrix operations.  (The procedure `accumulate-n'
is defined in *Note Exercise 2-36::.)

     (define (matrix-*-vector m v)
       (map <??> m))

     (define (transpose mat)
       (accumulate-n <??> <??> mat))

     (define (matrix-*-matrix m n)
       (let ((cols (transpose n)))
         (map <??> m)))

#+begin_src scheme :results output
(define (get-cars s)
  (map (lambda (x) (car x)) s))

(define (get-cdrs s)
  (map (lambda (x) (cdr x)) s))

(define (accumulate-n op initial seqs)
    (if (null? (car seqs))
        null
        (cons (foldr op initial (get-cars seqs))
                (accumulate-n op initial (get-cdrs seqs)))))

(define (dot-product v w)
    (foldr + 0 (map * v w)))

(define (matrix-*-vector m v)
  (map
   (lambda (x) (accumulate-n * 1 (list x v)))
   m))

(define (transpose mat)
  (accumulate-n cons null mat))

(define (matrix-*-matrix m n)
    (let ([cols (transpose n)])
      (map (lambda (a)
             (map (lambda (b) (dot-product a b)) cols))
           m)))

(define mat1
  (list
   (list 1 2 3)
   (list 4 5 6)
   (list 7 8 9)))

(define mat2
  (list
   (list 9 8 7)
   (list 6 5 4)
   (list 3 2 1)))

(define vec1
  (list 13 18 20))
(define vec2
  (list 5 4 9))

(define all-results
  (list
   (dot-product vec1 vec2)
   (matrix-*-vector mat1 vec1)
   (transpose mat1)
   (matrix-*-matrix mat1 mat2)))

(for ([result all-results])
  (display (~a result "\n")))
#+end_src

#+RESULTS:
: 317
: ((13 36 60) (52 90 120) (91 144 180))
: ((1 4 7) (2 5 8) (3 6 9))
: ((30 24 18) (84 69 54) (138 114 90))
