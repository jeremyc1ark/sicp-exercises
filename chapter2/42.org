#+TITLE: Exercise 2.42
The "eight-queens puzzle" asks how to place eight queens on a
chessboard so that no queen is in check from any other (i.e., no
two queens are in the same row, column, or diagonal). One
possible solution is shown in *Note Figure 2-8::.  One way to
solve the puzzle is to work across the board, placing a queen in
each column.  Once we have placed k - 1 queens, we must place the
kth queen in a position where it does not check any of the queens
already on the board.  We can formulate this approach
recursively: Assume that we have already generated the sequence
of all possible ways to place k - 1 queens in the first k - 1
columns of the board.  For each of these ways, generate an
extended set of positions by placing a queen in each row of the
kth column.  Now filter these, keeping only the positions for
which the queen in the kth column is safe with respect to the
other queens.  This produces the sequence of all ways to place k
queens in the first k columns.  By continuing this process, we
will produce not only one solution, but all solutions to the
puzzle.

We implement this solution as a procedure `queens', which returns a
sequence of all solutions to the problem of placing n queens on an
n*n chessboard.  `Queens' has an internal procedure `queen-cols'
that returns the sequence of all ways to place queens in the first
k columns of the board.

    (define (queens board-size)
    (define (queen-cols k)
        (if (= k 0)
            (list empty-board)
                (filter
                    (lambda (positions) (safe? k positions))
                    (flatmap
                        (lambda (rest-of-queens)
                            (map (lambda (new-row)
                                    (adjoin-position new-row k rest-of-queens))
                                (enumerate-interval 1 board-size)))
                        (queen-cols (- k 1))))))
        (queen-cols board-size))

In this procedure `rest-of-queens' is a way to place k - 1 queens
in the first k - 1 columns, and `new-row' is a proposed row in
which to place the queen for the kth column.  Complete the program
by implementing the representation for sets of board positions,
including the procedure `adjoin-position', which adjoins a new
row-column position to a set of positions, and `empty-board',
which represents an empty set of positions.  You must also write
the procedure `safe?', which determines for a set of positions,
whether the queen in the kth column is safe with respect to the
others.  (Note that we need only check whether the new queen is
safe--the other queens are already guaranteed safe with respect to
each other.)

#+begin_src scheme :results list
(define (fold-left op initial sequence)
    (define (iter result remaining)
            (if (null? remaining)
                result
                (iter (op result (car remaining))
                    (cdr remaining))))
    (iter initial sequence))

(define (fold-right op initial sequence)
   (if (null? sequence)
       initial
       (op (car sequence)
           (fold-right op initial (cdr sequence)))))

(define (enumerate-interval lo hi)
  (if (> lo hi)
      null
      (cons lo (enumerate-interval (add1 lo) hi))))

(define (flatmap proc seq)
    (fold-right append null (map proc seq)))

(define empty-board null)

(define (adjoin-position new-row k rest-of-queens)
  (cons (cons k new-row) rest-of-queens))

(define (get-row pos) (cdr pos))
(define (get-col pos) (car pos))

(define (member? elem lat)
  (cond ((null? lat) #f)
        ((= (car lat) elem) #t)
        (else (member? elem (cdr lat)))))

(define (get-all-rows positions [rows null])
  (if (null? positions)
      rows
      (get-all-rows (cdr positions)
                    (cons (get-row (car positions))
                          rows))))

(define (get-kth-pos k positions)
  ;; Assumes that the kth position is in `positions'
  (let ([current-pos (car positions)])
    (if (= (get-col current-pos) k)
        current-pos
        (get-kth-pos k (cdr positions)))))

(define (diag? a b)
  (let ([x-diff (abs (- (get-col a) (get-col b)))]
        [y-diff (abs (- (get-row a) (get-row b)))])
    (= x-diff y-diff)))

(define (horz? a b)
  (let ([a-row (get-row a)]
        [b-row (get-row b)])
    (= a-row b-row)))

(define (two-points-safe? a b)
  (not (or (horz? a b) (diag? a b))))

(define (safe? k positions)
  (let* ([target-pos (get-kth-pos k positions)]
         [other-positions (remove target-pos positions)])
    (foldl (lambda (x y) (and y (two-points-safe? x target-pos)))
           #t
           other-positions)))

(define (queens board-size)
    (define (queen-cols k)
        (if (= k 0)
            (list empty-board)
            (filter
                (lambda (positions) (safe? k positions))
                (flatmap
                    (lambda (rest-of-queens)
                      (map (lambda (new-row)
                             (adjoin-position new-row k rest-of-queens))
                            (enumerate-interval 1 board-size)))
                    (queen-cols (- k 1))))))
        (queen-cols board-size))

(queens 5)
#+end_src

#+RESULTS:
- ((5 . 4) (4 . 2) (3 . 5) (2 . 3) (1 . 1))
- ((5 . 3) (4 . 5) (3 . 2) (2 . 4) (1 . 1))
- ((5 . 5) (4 . 3) (3 . 1) (2 . 4) (1 . 2))
- ((5 . 4) (4 . 1) (3 . 3) (2 . 5) (1 . 2))
- ((5 . 5) (4 . 2) (3 . 4) (2 . 1) (1 . 3))
- ((5 . 1) (4 . 4) (3 . 2) (2 . 5) (1 . 3))
- ((5 . 2) (4 . 5) (3 . 3) (2 . 1) (1 . 4))
- ((5 . 1) (4 . 3) (3 . 5) (2 . 2) (1 . 4))
- ((5 . 3) (4 . 1) (3 . 4) (2 . 2) (1 . 5))
- ((5 . 2) (4 . 4) (3 . 1) (2 . 3) (1 . 5))
