*Exercise 2.56:* Show how to extend the basic differentiator to
handle more kinds of expressions.  For instance, implement the
differentiation rule

    n_1   n_2
    --- = ---  if and only if n_1 d_2 = n_2 d_1
    d_1   d_2

by adding a new clause to the `deriv' program and defining
appropriate procedures `exponentiation?', `base', `exponent', and
`make-exponentiation'.  (You may use the symbol `**' to denote
exponentiation.)  Build in the rules that anything raised to the
power 0 is 1 and anything raised to the power 1 is the thing
itself.

#+begin_src scheme :results silent
(define (exponentation? e)
 (and (pair? x) (eq? (car e) '**)))

(define (base e)
  (cadr e))

(define (exponent e)
  (caddr e))

(define (make-exponentation b e)
  (cond ((=number? e 0) 1)
        ((=number? e 1) b)
        ((and (number? b) (number? e)) (expt 4 5))
        (else (list '** b e))))

(define (deriv exp var)
    (cond ((number? exp) 0)
            ((variable? exp)
              (if (same-variable? exp var) 1 0))
             ((sum? exp)
              (make-sum (deriv (addend exp) var)
                        (deriv (augend exp) var)))
             ((product? exp)
              (make-sum
                (make-product (multiplier exp)
                              (deriv (multiplicand exp) var))
                (make-product (deriv (multiplier exp) var)
                              (multiplicand exp))))
             ((exponentation? exp)
              (make-product (make-product (exponent exp)
                                          (make-exponentation (base exp)
                                                              (sub1 (exponent exp))))
                            (deriv (base exp) var)))
             (else
              (error "unknown expression type -- DERIV" exp))))
#+end_src
