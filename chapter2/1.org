*Exercise 2.1:* Define a better version of `make-rat' that handles
both positive and negative arguments.  `Make-rat' should normalize
the sign so that if the rational number is positive, both the
numerator and denominator are positive, and if the rational number
is negative, only the numerator is negative.

#+begin_src scheme :results list
  (require racket/bool)

  (define (make-rat n d)
    (let ([g (gcd n d)])
      (if (xor (> 0 n) (> 0 d))
          (cons (* -1 (abs (/ n g))) (abs (/ d g)))
          (cons (abs (/ n g)) (abs (/ d g))))))

  (list
   (make-rat -4 -16)
   (make-rat -4 16)
   (make-rat 4 -16)
   (make-rat 4 16))
#+end_src

#+RESULTS:
: - (1 . 4)
: - (-1 . 4)
: - (-1 . 4)
: - (1 . 4)
