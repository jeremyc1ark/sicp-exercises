*Exercise 1.10:* The following procedure computes a mathematical
function called Ackermann's function.

    #+name: src-block
    #+begin_src scheme :results silent
    (define (A x y)
      (cond ((= y 0) 0)
            ((= x 0) (* 2 y))
            ((= y 1) 2)
            (else (A (- x 1)
                      (A x (- y 1))))))
    #+end_src

What are the values of the following expressions?

    #+begin_src scheme :noweb yes :results list
      <<src-block>>

      (list
       (A 1 10)

       (A 2 4)

       (A 3 3)
      )
    #+end_src

    #+RESULTS:
    - 1024
    - 65536
    - 65536

Consider the following procedures, where `A' is the procedure
defined above:

    (define (f n) (A 0 n))

    (define (g n) (A 1 n))

    (define (h n) (A 2 n))

    (define (k n) (* 5 n n))

Give concise mathematical definitions for the functions computed
by the procedures `f', `g', and `h' for positive integer values of
n.  For example, `(k n)' computes 5n^2.

#+begin_src scheme :results list :noweb yes
  <<src-block>>

  (define (test-it-out func)
    (define (test-it-out-iter f nums)
      (if (null? nums)
          `()
          (cons
           (f (car nums))
           (test-it-out-iter f (cdr nums)))
          )
      )
    (test-it-out-iter
     func
     (list 0 1 2 3 4))
    )

  (define (f n) (A 0 n))

  (define (g n) (A 1 n))

  (define (h n) (A 2 n))

  (define (k n) (* 5 n n))

  (list
   (test-it-out f)
   (test-it-out g)
   (test-it-out h)
   (test-it-out k)
  )
#+end_src

#+RESULTS:
- (0 2 4 6 8)
- (0 2 4 8 16)
- (0 2 4 16 65536)
- (0 5 20 45 80)

From their function definitions, in addition to their output, we
can deduce that:

f(x) = 2x

g(x) = 2^x

k(x) = 5x^2

For `h', we might need to do a bit more digging. The answer is
not immediately clear, however it is clear that the answers grow
extremely quickly. I originally tried testing each function from
0-10, but at 5, `h' returns an absolutely monstrous number. 0-4
is good enough for our purposes.

#+begin_src scheme :noweb yes :results output
  (require racket/trace)
  <<src-block>>

  (define (h n) (A 2 n))

  (trace A)
  (trace h)
  (h 4)
#+end_src

#+RESULTS:
#+begin_example
>(h 4)
>(A 2 4)
> (A 2 3)
> >(A 2 2)
> > (A 2 1)
< < 2
> >(A 1 2)
> > (A 1 1)
< < 2
> >(A 0 2)
< <4
> (A 1 4)
> >(A 1 3)
> > (A 1 2)
> > >(A 1 1)
< < <2
> > (A 0 2)
< < 4
> >(A 0 4)
< <8
> (A 0 8)
< 16
>(A 1 16)
> (A 1 15)
> >(A 1 14)
> > (A 1 13)
> > >(A 1 12)
> > > (A 1 11)
> > > >(A 1 10)
> > > > (A 1 9)
> > > > >(A 1 8)
> > > > > (A 1 7)
> > > >[10] (A 1 6)
> > > >[11] (A 1 5)
> > > >[12] (A 1 4)
> > > >[13] (A 1 3)
> > > >[14] (A 1 2)
> > > >[15] (A 1 1)
< < < <[15] 2
> > > >[14] (A 0 2)
< < < <[14] 4
> > > >[13] (A 0 4)
< < < <[13] 8
> > > >[12] (A 0 8)
< < < <[12] 16
> > > >[11] (A 0 16)
< < < <[11] 32
> > > >[10] (A 0 32)
< < < <[10] 64
> > > > > (A 0 64)
< < < < < 128
> > > > >(A 0 128)
< < < < <256
> > > > (A 0 256)
< < < < 512
> > > >(A 0 512)
< < < <1024
> > > (A 0 1024)
< < < 2048
> > >(A 0 2048)
< < <4096
> > (A 0 4096)
< < 8192
> >(A 0 8192)
< <16384
> (A 0 16384)
< 32768
>(A 0 32768)
<65536
#+end_example

I used Racket's built-in `trace' function to track the calls to
`A'. This should give us some insight as to what is going on
behind the scenes. 
