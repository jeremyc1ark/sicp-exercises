*Exercise 1.8:* Newton's method for cube roots is based on the
fact that if y is an approximation to the cube root of x, then a
better approximation is given by the value

    x/y^2 + 2y
    ----------
        3

Use this formula to implement a cube-root procedure analogous to
the square-root procedure.  (In section *Note 1-3-4:: we will see
how to implement Newton's method in general as an abstraction of
these square-root and cube-root procedures.)

#+begin_src scheme
(define (improve guess x)
  (/
   (+ (* 2 guess)
      (/ x (sqr guess))
      )
   3))

(define (good-enough? guess x)
  (let ((margin-of-error 0.001))
    (< (/ (abs (- (* guess (sqr guess)) x)) x) margin-of-error))
  )

(define (cbrt-iter guess x prev-guess)
  (cond
   ((= guess prev-guess) guess)
   ((good-enough? guess x) guess)
   (else (cbrt-iter (improve guess x) x guess))
   )
  )

(exact->inexact (cbrt-iter 4 27 0))
#+end_src

#+RESULTS:
: 3.0000834553024767

